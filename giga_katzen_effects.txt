#kaiser_angry_3 = war
#kaiser_angry_2 = extremely displeased
#kaiser_angry_1 = displeased
#kaiser_neutral = indifferent
#kaiser_happy_1 = cordial
#kaiser_happy_2 = friendly
#kaiser_happy_3 = very friendly
#kaiser_happy_4 = extremely friendly
#kaiser_happy_5 = elated
decrease_kaiser_opinion = {
	if = {
		limit = { has_country_flag = kaiser_happy_4 }
		remove_country_flag = kaiser_happy_4
		set_country_flag = kaiser_happy_3
	}
	else_if = {
		limit = { has_country_flag = kaiser_happy_3 }
		remove_country_flag = kaiser_happy_3
		set_country_flag = kaiser_happy_2
		if = {
			limit = { has_country_flag = allied_to_kaiser }
			country_event = { id = giga_katzen.3002 days = 10 random = 5 }
		}
	}
	else_if = {
		limit = { has_country_flag = kaiser_happy_2 }
		remove_country_flag = kaiser_happy_2
		set_country_flag = kaiser_happy_1
		if = {
			limit = { has_country_flag = allied_to_kaiser }
			country_event = { id = giga_katzen.3002 days = 10 random = 5 }
		}
	}
	else_if = {
		limit = { has_country_flag = kaiser_happy_1 }
		remove_country_flag = kaiser_happy_1
		set_country_flag = kaiser_neutral
		if = {
			limit = { has_country_flag = allied_to_kaiser }
			country_event = { id = giga_katzen.3002 days = 10 random = 5 }
		}
	}
	else_if = {
		limit = { has_country_flag = kaiser_neutral }
		remove_country_flag = kaiser_neutral
		set_country_flag = kaiser_angry_1
		if = {
			limit = { has_country_flag = allied_to_kaiser }
			country_event = { id = giga_katzen.3002 days = 10 random = 5 }
		}
	}
	else_if = {
		limit = { has_country_flag = kaiser_angry_1 }
		remove_country_flag = kaiser_angry_1
		set_country_flag = kaiser_angry_2
		if = {
			limit = { has_country_flag = allied_to_kaiser }
			country_event = { id = giga_katzen.3002 days = 10 random = 5 }
		}
	}
	else_if = {
		limit = { has_country_flag = kaiser_angry_2 }
		remove_country_flag = kaiser_angry_2
		set_country_flag = kaiser_angry_3
		if = {
			limit = { NOT = { has_country_flag = katzenartig_war_declaration_forbidden } } #flag is for ACE
			country_event = { id = giga_katzen.050 days = 30 random = 5 } #Kaiser declares war
		}
	}
}

increase_kaiser_opinion = {
	if = {
		limit = { has_country_flag = kaiser_angry_3 }
		remove_country_flag = kaiser_angry_3
		set_country_flag = kaiser_angry_2
	}
	else_if = {
		limit = { has_country_flag = kaiser_angry_2 }
		remove_country_flag = kaiser_angry_2
		set_country_flag = kaiser_angry_1
	}
	else_if = {
		limit = {
			has_country_flag = kaiser_angry_1
			NOT = { katzen_is_genocidal = yes }
		}
		remove_country_flag = kaiser_angry_1
		set_country_flag = kaiser_neutral
	}
	else_if = {
		limit = {
			has_country_flag = kaiser_neutral
			NOT = { katzen_is_genocidal = yes }
		}
		remove_country_flag = kaiser_neutral
		set_country_flag = kaiser_happy_1
	}
	else_if = {
		limit = {
			has_country_flag = kaiser_happy_1
			NOT = { katzen_is_genocidal = yes }
		}
		remove_country_flag = kaiser_happy_1
		set_country_flag = kaiser_happy_2
	}
	else_if = {
		limit = {
			has_country_flag = kaiser_happy_2
			NOT = { katzen_is_genocidal = yes }
		}
		remove_country_flag = kaiser_happy_2
		set_country_flag = kaiser_happy_3
	}
	else_if = {
		limit = {
			has_country_flag = kaiser_happy_3
			NOT = { katzen_is_genocidal = yes }
		}
		remove_country_flag = kaiser_happy_3
		set_country_flag = kaiser_happy_4
	}
}

set_kaiser_war_opinion = {
	if = {
		limit = { has_country_flag = kaiser_angry_2 }
		remove_country_flag = kaiser_angry_2
		set_country_flag = kaiser_angry_3
	}
	else_if = {
		limit = { has_country_flag = kaiser_angry_1 }
		remove_country_flag = kaiser_angry_1
		set_country_flag = kaiser_angry_3
	}
	else_if = {
		limit = { has_country_flag = kaiser_neutral }
		remove_country_flag = kaiser_neutral
		set_country_flag = kaiser_angry_3
	}
	else_if = {
		limit = { has_country_flag = kaiser_happy_1 }
		remove_country_flag = kaiser_happy_1
		set_country_flag = kaiser_angry_3
	}
	else_if = {
		limit = { has_country_flag = kaiser_happy_2 }
		remove_country_flag = kaiser_happy_2
		set_country_flag = kaiser_angry_3
	}
	else_if = {
		limit = { has_country_flag = kaiser_happy_3 }
		remove_country_flag = kaiser_happy_3
		set_country_flag = kaiser_angry_3
	}
	else_if = {
		limit = { has_country_flag = kaiser_happy_4 }
		remove_country_flag = kaiser_happy_4
		set_country_flag = kaiser_angry_3
	}
	if = {
		limit = {
			NOR = {
				has_country_flag = kaiser_angry_3
				has_country_flag = kaiser_angry_2
				has_country_flag = kaiser_angry_1
				has_country_flag = kaiser_neutral
				has_country_flag = kaiser_happy_1
				has_country_flag = kaiser_happy_2
				has_country_flag = kaiser_happy_3
				has_country_flag = kaiser_happy_4
			}
		}
		set_country_flag = kaiser_angry_3
	}
	set_country_flag = at_war_with_katzenartig
}

spawn_medium_katzen_fleet = {
	create_fleet = { #Spawn a simple task force of panzers & bombers
		name = "Katzenraumflotte"
		settings = {
			spawn_debris = no
			can_upgrade = no
			uses_naval_capacity = yes
		}
		effect = {
			set_owner = event_target:flusion_primitives_country
			while = {
				count = 2
				create_ship = {
					name = random
					design = "Clermeowth"
					prefix = no
				}
			}
			while = {
				count = 6 #6 bombers
				create_ship = {
					name = random
					design = "Douclaw"
					prefix = no
				}
			}
			while = {
				count = 12 #12 panzers
				create_ship = {
					name = random
					design = "Katzchen"
					prefix = no
				}
			}
			assign_leader = event_target:katzen_admiral
			set_location = {
				target = PREV
				distance = 15
				angle = random
			}
		}
	}
}

spawn_katzen_troop_fleet = {
	event_target:flusion_primitives_country = {
		random = {
			chance = 50
			create_katzen_general = yes
		}
	}
	
	create_fleet = { #Spawn a simple task force of panzers
		name = "Weltraumtruppen Force"
		settings = {
			spawn_debris = no
			can_upgrade = no
			uses_naval_capacity = yes
		}
		effect = {
			set_owner = event_target:flusion_primitives_country
			create_army_transport = {
				army_type = riesigerkatzenpanzer_assault
			}
			while = {
				count = 4 #5 transports
				create_army_transport = {
					army_type = katzen_assault_army
					species = event_target:flusion_katzens
				}
			}
			assign_leader = event_target:katzen_general
			set_fleet_flag = katzen_troop_fleet
			set_location = {
				target = event_target:katzen_war_forge
				distance = 10
				angle = random
			}
		}
	}
}

spawn_katzen_panzer_fleet = {
	create_fleet = { #Spawn a simple task force of panzers
		name = "Weltraumpanzer Force"
		settings = {
			spawn_debris = no
			can_upgrade = no
			uses_naval_capacity = yes
		}
		effect = {
			set_owner = event_target:flusion_primitives_country
			while = {
				count = 10 #10 panzers
				create_ship = {
					name = random
					design = "Katzchen"
					prefix = no
				}
			}
			giga_assign_admiral = yes
			assign_leader = event_target:admiral_assignee
			set_fleet_flag = katzen_reserve_fleet
			set_fleet_flag = katzen_panzer_fleet
			set_location = {
				target = ROOT
				distance = 10
				angle = random
			}
		}
	}
}

spawn_katzen_bomber_fleet = {
	create_fleet = { #Spawn a simple task force of bombers
		name = "Weltraumbomber Force"
		settings = {
			spawn_debris = no
			can_upgrade = no
			uses_naval_capacity = yes
		}
		effect = {
			set_owner = event_target:flusion_primitives_country
			while = {
				count = 5
				create_ship = {
					name = random
					design = "Douclaw"
					prefix = no
				}
			}
			giga_assign_admiral = yes
			assign_leader = event_target:admiral_assignee
			set_fleet_flag = katzen_reserve_fleet
			set_fleet_flag = katzen_bomber_fleet
			set_location = {
				target = ROOT
				distance = 10
				angle = random
			}
		}
	}
}

spawn_katzen_cruiser_fleet = {
	create_fleet = { #Spawn a simple task force of cruisers
		name = "Weltraumkreuzer Force"
		settings = {
			spawn_debris = no
			can_upgrade = no
			uses_naval_capacity = yes
		}
		effect = {
			set_owner = event_target:flusion_primitives_country
			while = {
				count = 2
				create_ship = {
					name = random
					design = "Neu-Clermeowth"
					prefix = no
				}
			}
			giga_assign_admiral = yes
			assign_leader = event_target:admiral_assignee
			set_fleet_flag = katzen_reserve_fleet
			set_fleet_flag = katzen_cruiser_fleet
			set_location = {
				target = ROOT
				distance = 10
				angle = random
			}
		}
	}
}

spawn_katzen_submarine_fleet = {
	create_fleet = { #Spawn a simple task force of bombers
		name = "Unterraumboot Force"
		settings = {
			spawn_debris = no
			can_upgrade = no
			uses_naval_capacity = no
			can_change_composition = no
		}
		effect = {
			set_owner = event_target:flusion_primitives_country
			while = {
				count = 6
				create_ship = {
					name = random
					design = "Kimitz"
					prefix = no
					effect = { set_disable_at_health = 0.05 }
				}
			}
			giga_assign_admiral = yes
			assign_leader = event_target:admiral_assignee
			set_fleet_flag = katzen_reserve_fleet
			set_fleet_flag = katzen_submarine_fleet
			set_formation_scale = 2
			set_location = {
				target = ROOT
				distance = 10
				angle = random
			}
		}
	}
}

rename_planet_katzen = {
    if = {
        limit = {
            NOR = {
                has_planet_flag = katzenland
                has_planet_flag = gigaflusion
                solar_system = { has_star_flag = flusion_system }
            }
        }
        random_list = {
            0 = {
                set_name = "라이츠스포르트-바이-크리그"
                modifier = {
                    add = 999
                    has_planet_flag = giga_eaw_planet
                }
            }
            0 = {
                set_name = "스팀-코멘타토르트레넨제"
                event_target:flusion_primitives_country = { set_country_flag = steam_commenter_tears_planet }
                modifier = {
                    add = 999
                    is_planet_class = pc_ocean
                    NOT = { event_target:flusion_primitives_country = { has_country_flag = steam_commenter_tears_planet } }
                }
            }
            0 = {
                set_name = "스팀-코멘타토를란트"
                event_target:flusion_primitives_country = { set_country_flag = steam_commenter_salt_planet }
                modifier = {
                    add = 999
                    has_modifier = pd_salt
                    NOT = { event_target:flusion_primitives_country = { has_country_flag = steam_commenter_salt_planet } }
                }
            }
            1 = { set_name = "코코빌" }
            1 = { set_name = "노바 플루시오니아" }
            1 = { set_name = "노이 카타운" }
            1 = { set_name = "펠리니다" }
            1 = { set_name = "캣테일의 안식처" }
            1 = { set_name = "미노울리스" }
            1 = { set_name = "엘로니" }
            1 = { set_name = "츠바이블리오" }
            1 = { set_name = "라운" }
            1 = { set_name = "카첸하우스" }
            1 = { set_name = "스위트 홈" }
            1 = { set_name = "펠쿠겔" }
            1 = { set_name = "묵킨스" }
            1 = { set_name = "트라이블리오" }
            1 = { set_name = "카첸일라" }
            1 = { set_name = "데르카테즈" }
            1 = { set_name = "카타일랜드" }
            1 = { set_name = "키티캣" }
            1 = { set_name = "캣닙" }
            1 = { set_name = "퍼발리아" }
            1 = { set_name = "블래스테리아" }
            1 = { set_name = "가토쇼어스" }
            1 = { set_name = "노르디캣" }
            1 = { set_name = "커들존" }
            1 = { set_name = "이치리아" }
            1 = { set_name = "아타리아" }
            1 = { set_name = "라이오니타" }
            1 = { set_name = "미오핀" }
            1 = { set_name = "미터힐스" }
            1 = { set_name = "링크시" }
            1 = { set_name = "펠린다" }
            1 = { set_name = "스크래차" }
            1 = { set_name = "밥카" }
            1 = { set_name = "프랑카트" }
            1 = { set_name = "키튼랜드" }
            1 = { set_name = "엘로위니엔" }
            1 = { set_name = "아타락시엔" }
            1 = { set_name = "푸치킨니엔" }
            1 = { set_name = "니니엔" }
            1 = { set_name = "미테오리엔" }
            1 = { set_name = "이치니엔" }
            1 = { set_name = "바바우리아" }
            1 = { set_name = "퍼렘버그" }
            1 = { set_name = "큐틀로뉴" }
            1 = { set_name = "파우팔라티네이트" }
            1 = { set_name = "소박" }
            1 = { set_name = "캣텐바덴" }
            1 = { set_name = "파우키테인" }
            1 = { set_name = "카츠발트" }
            1 = { set_name = "퍼를린" }
            1 = { set_name = "프랭크퍼" }
            1 = { set_name = "미오니크" }
            1 = { set_name = "카첸하우젠" }
            1 = { set_name = "에르푸르트" }
            1 = { set_name = "저뮤링" }
            1 = { set_name = "래프타운" }
            1 = { set_name = "세세부르크" }
            1 = { set_name = "레오프치히" }
            1 = { set_name = "니나아헨" }
            1 = { set_name = "헨리엘베르크" }
            1 = { set_name = "카토피아" }
            1 = { set_name = "총크베르크" }
            1 = { set_name = "카첸베르크" }
            1 = { set_name = "바이미아우" }
            1 = { set_name = "바이미아우" }
            1 = { set_name = "슈누르푸르트" }
        }
    }
}

create_katzen_admiral = { #TODO MERGE
	random_list = {
		15 = {
			create_leader = {
				class = commander
				species = event_target:flusion_katzens
				name = random
				skill = 2
				traits = {
					trait = katzen_trait_blitzkrieg
				}
				effect = {
					save_event_target_as = katzen_admiral
				}
			}
		}
		15 = {
			create_leader = {
				class = commander
				species = event_target:flusion_katzens
				name = random
				skill = 2
				traits = {
					trait = katzen_trait_nukelad
				}
				effect = {
					save_event_target_as = katzen_admiral
				}
			}
		}
		20 = {
			create_leader = {
				class = commander
				species = event_target:flusion_katzens
				name = random
				skill = 2
				effect = {
					save_event_target_as = katzen_admiral
				}
			}
		}
	}
}

create_katzen_general = {
	random_list = {
		10 = {
			create_leader = {
				class = commander
				species = event_target:flusion_katzens
				name = random
				skill = 2
				traits = {
					trait = katzen_trait_nukelad
				}
				effect = {
					save_event_target_as = katzen_general
				}
			}
		}
		20 = {
			create_leader = {
				class = commander
				species = event_target:flusion_katzens
				name = random
				skill = 2
				effect = {
					save_event_target_as = katzen_general
				}
			}
		}
	}
}

katzen_warforge_spawn_fleet = {
	event_target:flusion_primitives_country = {
		random = {
			chance = 33
			create_katzen_admiral = yes
		}
	}
	random_list = {
		30 = {
			spawn_katzen_panzer_fleet = yes
		}
		30 = {
			spawn_katzen_bomber_fleet = yes
		}
		20 = {
			spawn_katzen_troop_fleet = yes
		}
		20 = {
			spawn_katzen_cruiser_fleet = yes
		}
	}
}

calculate_system_value_kaiser = {
	if = {
		limit = { #Empty system
			NOT = {
				any_system_planet = { is_colony = yes }
			}
		}
		event_target:flusion_primitives_country = {
			change_variable = {
				which = "kaiser_trade_value"
				value = 5
			}
		}
	}
	else_if = { #Habitable worlds (non colonies) add value
		limit = {
			any_system_planet = {
				is_planet_habitable = yes
				is_colony = no
			}
		}
		event_target:flusion_primitives_country = {
			change_variable = {
				which = "kaiser_trade_value"
				value = 10
			}
		}
	}
	else_if = { #Calculate the system's value based on colonies
		limit = {
			any_system_planet = { #Minor colony
				is_colony = yes
				NOT = { count_owned_pop = { count > 10 } }
			}
		}
		event_target:flusion_primitives_country = {
			change_variable = {
				which = "kaiser_trade_value"
				value = 20
			}
		}
	}
	else_if = {
		limit = {
			any_system_planet = { #Medium colony
				is_colony = yes
				count_owned_pop = { count > 10 }
				count_owned_pop = { count < 40 }
			}
		}
		event_target:flusion_primitives_country = {
			change_variable = {
				which = "kaiser_trade_value"
				value = 40
			}
		}
	}
	else_if = {
		limit = {
			any_system_planet = { #Major colony
				is_colony = yes
				count_owned_pop = { count >= 40 }
			}
		}
		event_target:flusion_primitives_country = {
			change_variable = {
				which = "kaiser_trade_value"
				value = 100
			}
		}
	}
	if = { #Megas add value
		limit = {
			any_system_megastructure = {
				exists = THIS
			}
		}
		event_target:flusion_primitives_country = {
			change_variable = {
				which = "kaiser_trade_value"
				value = 40
			}
		}
	}
	if = { #QSO adds value
		limit = {
			any_system_megastructure = {
				OR = {
					is_megastructure_type = quasi_stellar_obliterator_0
					is_megastructure_type = quasi_stellar_obliterator_1
					is_megastructure_type = quasi_stellar_obliterator_2
					is_megastructure_type = quasi_stellar_obliterator_3
					is_megastructure_type = quasi_stellar_obliterator_4
					is_megastructure_type = quasi_stellar_obliterator_5
					is_megastructure_type = nicoll_beam_0
					is_megastructure_type = nicoll_beam_1
					is_megastructure_type = nicoll_beam_2
					is_megastructure_type = nicoll_beam_3
					is_megastructure_type = nicoll_beam_4
					is_megastructure_type = nicoll_beam_firing
					is_megastructure_type = nicoll_beam_menu
					is_megastructure_type = nicoll_beam_ready
					is_megastructure_type = nicoll_beam_cooldown
					is_megastructure_type = nicoll_beam_targetting
					is_megastructure_type = psychic_beacon_0
					is_megastructure_type = psychic_beacon_1
					is_megastructure_type = psychic_beacon_2
					is_megastructure_type = psychic_beacon_3
					is_megastructure_type = psychic_beacon_4
				}
			}
		}
		event_target:flusion_primitives_country = {
			change_variable = {
				which = "kaiser_trade_value"
				value = 300
			}
		}
	}
	if = { #QSO adds value if katown res is high
		limit = {
			any_system_megastructure = {
				OR = {
					is_megastructure_type = quasi_stellar_obliterator_0
					is_megastructure_type = quasi_stellar_obliterator_1
					is_megastructure_type = quasi_stellar_obliterator_2
					is_megastructure_type = quasi_stellar_obliterator_3
					is_megastructure_type = quasi_stellar_obliterator_4
					is_megastructure_type = quasi_stellar_obliterator_5
					is_megastructure_type = nicoll_beam_0
					is_megastructure_type = nicoll_beam_1
					is_megastructure_type = nicoll_beam_2
					is_megastructure_type = nicoll_beam_3
					is_megastructure_type = nicoll_beam_4
					is_megastructure_type = nicoll_beam_firing
					is_megastructure_type = nicoll_beam_menu
					is_megastructure_type = nicoll_beam_ready
					is_megastructure_type = nicoll_beam_cooldown
					is_megastructure_type = nicoll_beam_targetting
					is_megastructure_type = psychic_beacon_0
					is_megastructure_type = psychic_beacon_1
					is_megastructure_type = psychic_beacon_2
					is_megastructure_type = psychic_beacon_3
					is_megastructure_type = psychic_beacon_4
				}
			}
			event_target:flusion_primitives_country = {
				check_variable = {
					which = katown_res
					value > 0
				}
			}
		}
		event_target:flusion_primitives_country = {
			change_variable = {
				which = "kaiser_trade_value"
				value = 1000
			}
		}
	}
	if = { #systemcraft adds value
		limit = {
			any_system_megastructure = {
				OR = {
					is_megastructure_type = war_system_0
					is_megastructure_type = war_system_1
					is_megastructure_type = war_system_2
					is_megastructure_type = war_system_3
					is_megastructure_type = war_system_4
					is_megastructure_type = war_system_5
				}
			}
		}
		event_target:flusion_primitives_country = {
			change_variable = {
				which = "kaiser_trade_value"
				value = 800
			}
		}
	}
	if = { #Gaia and artificial worlds add value
		limit = {
			any_system_planet = {
				OR = {
					is_planet_class = pc_gaia
					giga_habitable_structure = yes
				}
			}
		}
		event_target:flusion_primitives_country = {
			change_variable = {
				which = "kaiser_trade_value"
				value = 20
			}
		}
	}
	if = { #Strategic resources add value
		limit = {
			any_system_planet = {
				has_any_strategic_resource = yes
			}
		}
		event_target:flusion_primitives_country = {
			change_variable = {
				which = "kaiser_trade_value"
				value = 10
			}
		}
	}
	if = { #ecus adds value
		limit = {
			any_system_planet = {
				is_planet_class = pc_city
			}
		}
		event_target:flusion_primitives_country = {
			change_variable = {
				which = "kaiser_trade_value"
				value = 100
			}
		}
	}
	if = { #ACOT stuff adds value
		limit = {
			any_system_planet = {
				OR = {
					is_acot_awesome_planet_class = yes
					is_acot_pmc_vault = yes
				}
			}
		}
		event_target:flusion_primitives_country = {
			change_variable = {
				which = "kaiser_trade_value"
				value = 600
			}
		}
	}
}

katzen_clear_capitals = {
	remove_building = building_colony_shelter
	remove_building = building_capital
	remove_building = building_major_capital
	remove_building = building_system_capital
	remove_building = building_deployment_post
	remove_building = building_machine_capital
	remove_building = building_machine_major_capital
	remove_building = building_machine_system_capital
	remove_building = building_hive_capital
	remove_building = building_hive_major_capital
	remove_building = building_hab_capital
	remove_building = building_hab_major_capital
	remove_building = building_resort_capital
	remove_building = building_resort_major_capital
	remove_building = building_slave_capital
	remove_building = building_slave_major_capital
	remove_building = building_giga_katzen_capital
}

grow_katzen_colony = {
	random_list = {
		50 = {
			create_pop = {
				species = event_target:flusion_katzens
				count = 3
			}
			create_pop = { #The other flusion species move in
				species = event_target:flusionians
				count = 2
			}
			create_pop = {
				species = event_target:solakians
				count = 2
			}
			create_pop = { #The other flusion species move in
				species = event_target:kronks
				count = 1
			}
			create_pop = { #Sprinkle in some ezics
				species = event_target:arcticezics
			}
		}
		50 = {
			create_pop = {
				species = event_target:flusion_katzens
				count = 2
			}
			create_pop = { #The other flusion species move in
				species = event_target:flusionians
				count = 2
			}
			create_pop = {
				species = event_target:solakians
			}
			create_pop = { #The other flusion species move in
				species = event_target:kronks
			}
			create_pop = { #Sprinkle in some ezics
				species = event_target:arcticezics
			}
		}
		50 = {
			create_pop = {
				species = event_target:flusion_katzens
				count = 2
			}
			create_pop = {
				species = event_target:solakians
				count = 2
			}
			create_pop = { #The other flusion species move in
				species = event_target:flusionians
				count = 3
			}
			create_pop = { #The other flusion species move in
				species = event_target:kronks
			}
			create_pop = { #Sprinkle in some ezics
				species = event_target:arcticezics
			}
		}
	}
}

remove_fto_modifiers = {
	if = {
		limit = { has_modifier = fto_member }
		remove_modifier = fto_member
	}
	if = {
		limit = { has_modifier = fto_member_1 }
		remove_modifier = fto_member_1
	}
	if = {
		limit = { has_modifier = fto_member_2 }
		remove_modifier = fto_member_2
	}
	if = {
		limit = { has_modifier = fto_member_3 }
		remove_modifier = fto_member_3
	}
	if = {
		limit = { has_modifier = fto_member_4 }
		remove_modifier = fto_member_4
	}
}

clear_kaiser_demanded_systems = {
	every_system = { #REMOVE FLAGS
		limit = { has_star_flag = kaiser_demands_system }
		remove_star_flag = kaiser_demands_system
	}
	every_system = {
		limit = { has_star_flag = kaiser_demands_system_root }
		remove_star_flag = kaiser_demands_system_root
	}
}

generate_katzen_stellarite_platforms = {
	create_fleet = { #Flusion defenses
		name = "Katzenplanetenverteidigung"
		settings = {
			spawn_debris = no
		}
		effect = {
			set_owner = event_target:flusion_primitives_country
			create_ship = {
				name = "Katzenplanetenverteidigung"
				design = "Challier"
				upgradable = no
				effect = {
					add_modifier = {
						modifier = katzen_defensive_buff_stellarite
						days = -1
					}
				}
			}
			set_location = {
				target = event_target:gigaflusion
				distance = 20
				angle = 45
			}
			set_fleet_flag = katzen_planet_platform
		}
	}
	create_fleet = {
		name = "Katzenplanetenverteidigung"
		settings = {
			spawn_debris = no
		}
		effect = {
			set_owner = event_target:flusion_primitives_country
			create_ship = {
				name = "Katzenplanetenverteidigung"
				design = "Challier"
				upgradable = no
				effect = {
					add_modifier = {
						modifier = katzen_defensive_buff_stellarite
						days = -1
					}
				}
			}
			set_location = {
				target = event_target:gigaflusion
				distance = 20
				angle = 90
			}
			set_fleet_flag = katzen_planet_platform
		}
	}
	create_fleet = { #Flusion defenses
		name = "Katzenplanetenverteidigung"
		settings = {
			spawn_debris = no
		}
		effect = {
			set_owner = event_target:flusion_primitives_country
			create_ship = {
				name = "Katzenplanetenverteidigung"
				design = "Challier"
				upgradable = no
				effect = {
					add_modifier = {
						modifier = katzen_defensive_buff_stellarite
						days = -1
					}
				}
			}
			set_location = {
				target = event_target:gigaflusion
				distance = 20
				angle = 135
			}
			set_fleet_flag = katzen_planet_platform
		}
	}
	create_fleet = {
		name = "Katzenplanetenverteidigung"
		settings = {
			spawn_debris = no
		}
		effect = {
			set_owner = event_target:flusion_primitives_country
			create_ship = {
				name = "Katzenplanetenverteidigung"
				design = "Challier"
				upgradable = no
				effect = {
					add_modifier = {
						modifier = katzen_defensive_buff_stellarite
						days = -1
					}
				}
			}
			set_location = {
				target = event_target:gigaflusion
				distance = 20
				angle = 180
			}
			set_fleet_flag = katzen_planet_platform
		}
	}
	create_fleet = { #Flusion defenses
		name = "Katzenplanetenverteidigung"
		settings = {
			spawn_debris = no
		}
		effect = {
			set_owner = event_target:flusion_primitives_country
			create_ship = {
				name = "Katzenplanetenverteidigung"
				design = "Challier"
				upgradable = no
				effect = {
					add_modifier = {
						modifier = katzen_defensive_buff_stellarite
						days = -1
					}
				}
			}
			set_location = {
				target = event_target:gigaflusion
				distance = 20
				angle = 225
			}
			set_fleet_flag = katzen_planet_platform
		}
	}
	create_fleet = {
		name = "Katzenplanetenverteidigung"
		settings = {
			spawn_debris = no
		}
		effect = {
			set_owner = event_target:flusion_primitives_country
			create_ship = {
				name = "Katzenplanetenverteidigung"
				design = "Challier"
				upgradable = no
				effect = {
					add_modifier = {
						modifier = katzen_defensive_buff_stellarite
						days = -1
					}
				}
			}
			set_location = {
				target = event_target:gigaflusion
				distance = 20
				angle = 270
			}
			set_fleet_flag = katzen_planet_platform
		}
	}
	create_fleet = { #Flusion defenses
		name = "Katzenplanetenverteidigung"
		settings = {
			spawn_debris = no
		}
		effect = {
			set_owner = event_target:flusion_primitives_country
			create_ship = {
				name = "Katzenplanetenverteidigung"
				design = "Challier"
				upgradable = no
				effect = {
					add_modifier = {
						modifier = katzen_defensive_buff_stellarite
						days = -1
					}
				}
			}
			set_location = {
				target = event_target:gigaflusion
				distance = 20
				angle = 315
			}
			set_fleet_flag = katzen_planet_platform
		}
	}
	create_fleet = {
		name = "Katzenplanetenverteidigung"
		settings = {
			spawn_debris = no
		}
		effect = {
			set_owner = event_target:flusion_primitives_country
			create_ship = {
				name = "Katzenplanetenverteidigung"
				design = "Challier"
				upgradable = no
				effect = {
					add_modifier = {
						modifier = katzen_defensive_buff_stellarite
						days = -1
					}
				}
			}
			set_location = {
				target = event_target:gigaflusion
				distance = 20
				angle = 360
			}
			set_fleet_flag = katzen_planet_platform
		}
	}
	create_fleet = { #Flusion defenses
		name = "Katzenplanetenverteidigung"
		settings = {
			spawn_debris = no
		}
		effect = {
			set_owner = event_target:flusion_primitives_country
			create_ship = {
				name = "Katzenplanetenverteidigung"
				design = "Challier"
				upgradable = no
				effect = {
					add_modifier = {
						modifier = katzen_defensive_buff_stellarite
						days = -1
					}
				}
			}
			set_location = {
				target = event_target:gigaflusion
				distance = 30
				angle = 0
			}
			set_fleet_flag = katzen_planet_platform
		}
	}
	create_fleet = {
		name = "Katzenplanetenverteidigung"
		settings = {
			spawn_debris = no
		}
		effect = {
			set_owner = event_target:flusion_primitives_country
			create_ship = {
				name = "Katzenplanetenverteidigung"
				design = "Challier"
				upgradable = no
				effect = {
					add_modifier = {
						modifier = katzen_defensive_buff_stellarite
						days = -1
					}
				}
			}
			set_location = {
				target = event_target:gigaflusion
				distance = 30
				angle = 180
			}
			set_fleet_flag = katzen_planet_platform
		}
	}
	create_fleet = { #Flusion defenses
		name = "Katzenplanetenverteidigung"
		settings = {
			spawn_debris = no
		}
		effect = {
			set_owner = event_target:flusion_primitives_country
			create_ship = {
				name = "Katzenplanetenverteidigung"
				design = "Challier"
				upgradable = no
				effect = {
					add_modifier = {
						modifier = katzen_defensive_buff_stellarite
						days = -1
					}
				}
			}
			set_location = {
				target = event_target:gigaflusion
				distance = 30
				angle = 90
			}
			set_fleet_flag = katzen_planet_platform
		}
	}
	create_fleet = {
		name = "Katzenplanetenverteidigung"
		settings = {
			spawn_debris = no
		}
		effect = {
			set_owner = event_target:flusion_primitives_country
			create_ship = {
				name = "Katzenplanetenverteidigung"
				design = "Challier"
				upgradable = no
				effect = {
					add_modifier = {
						modifier = katzen_defensive_buff_stellarite
						days = -1
					}
				}
			}
			set_location = {
				target = event_target:gigaflusion
				distance = 30
				angle = 270
			}
			set_fleet_flag = katzen_planet_platform
		}
	}
	create_fleet = {
		name = "Katzenplanetenverteidigung"
		settings = {
			spawn_debris = no
		}
		effect = {
			set_owner = event_target:flusion_primitives_country
			create_ship = {
				name = "Katzenplanetenverteidigung"
				design = "Challier"
				upgradable = no
				effect = {
					add_modifier = {
						modifier = katzen_defensive_buff_stellarite
						days = -1
					}
				}
			}
			set_location = {
				target = event_target:doughland
				distance = 20
				angle = random
			}
			set_fleet_flag = katzen_planet_platform
		}
	}
	create_fleet = {
		name = "Katzenplanetenverteidigung"
		settings = {
			spawn_debris = no
		}
		effect = {
			set_owner = event_target:flusion_primitives_country
			create_ship = {
				name = "Katzenplanetenverteidigung"
				design = "Challier"
				upgradable = no
				effect = {
					add_modifier = {
						modifier = katzen_defensive_buff_stellarite
						days = -1
					}
				}
			}
			set_location = {
				target = event_target:veene
				distance = 20
				angle = random
			}
			set_fleet_flag = katzen_planet_platform
		}
	}
	create_fleet = {
		name = "Katzenplanetenverteidigung"
		settings = {
			spawn_debris = no
		}
		effect = {
			set_owner = event_target:flusion_primitives_country
			create_ship = {
				name = "Katzenplanetenverteidigung"
				design = "Challier"
				upgradable = no
				effect = {
					add_modifier = {
						modifier = katzen_defensive_buff_stellarite
						days = -1
					}
				}
			}
			set_location = {
				target = event_target:merries
				distance = 20
				angle = random
			}
			set_fleet_flag = katzen_planet_platform
		}
	}
	create_fleet = {
		name = "Katzenplanetenverteidigung"
		settings = {
			spawn_debris = no
		}
		effect = {
			set_owner = event_target:flusion_primitives_country
			create_ship = {
				name = "Katzenplanetenverteidigung"
				design = "Challier"
				upgradable = no
				effect = {
					add_modifier = {
						modifier = katzen_defensive_buff_stellarite
						days = -1
					}
				}
			}
			set_location = {
				target = event_target:creeo
				distance = 20
				angle = random
			}
			set_fleet_flag = katzen_planet_platform
		}
	}
	create_fleet = {
		name = "Katzenplanetenverteidigung"
		settings = {
			spawn_debris = no
		}
		effect = {
			set_owner = event_target:flusion_primitives_country
			create_ship = {
				name = "Katzenplanetenverteidigung"
				design = "Challier"
				upgradable = no
				effect = {
					add_modifier = {
						modifier = katzen_defensive_buff_stellarite
						days = -1
					}
				}
			}
			set_location = {
				target = event_target:glaka
				distance = 20
				angle = random
			}
			set_fleet_flag = katzen_planet_platform
		}
	}
	create_fleet = {
		name = "Katzenplanetenverteidigung"
		settings = {
			spawn_debris = no
		}
		effect = {
			set_owner = event_target:flusion_primitives_country
			create_ship = {
				name = "Katzenplanetenverteidigung"
				design = "Challier"
				upgradable = no
				effect = {
					add_modifier = {
						modifier = katzen_defensive_buff_stellarite
						days = -1
					}
				}
			}
			set_location = {
				target = event_target:mlekane
				distance = 20
				angle = random
			}
			set_fleet_flag = katzen_planet_platform
		}
	}
	create_fleet = {
		name = "Katzenplanetenverteidigung"
		settings = {
			spawn_debris = no
		}
		effect = {
			set_owner = event_target:flusion_primitives_country
			create_ship = {
				name = "Katzenplanetenverteidigung"
				design = "Challier"
				upgradable = no
				effect = {
					add_modifier = {
						modifier = katzen_defensive_buff_stellarite
						days = -1
					}
				}
			}
			set_location = {
				target = event_target:nesar
				distance = 20
				angle = random
			}
			set_fleet_flag = katzen_planet_platform
		}
	}
	create_fleet = {
		name = "Katzenplanetenverteidigung"
		settings = {
			spawn_debris = no
		}
		effect = {
			set_owner = event_target:flusion_primitives_country
			create_ship = {
				name = "Katzenplanetenverteidigung"
				design = "Challier"
				upgradable = no
				effect = {
					add_modifier = {
						modifier = katzen_defensive_buff_stellarite
						days = -1
					}
				}
			}
			set_location = {
				target = event_target:ledigen
				distance = 20
				angle = random
			}
			set_fleet_flag = katzen_planet_platform
		}
	}
	create_fleet = {
		name = "Katzenplanetenverteidigung"
		settings = {
			spawn_debris = no
		}
		effect = {
			set_owner = event_target:flusion_primitives_country
			create_ship = {
				name = "Katzenplanetenverteidigung"
				design = "Challier"
				upgradable = no
				effect = {
					add_modifier = {
						modifier = katzen_defensive_buff_stellarite
						days = -1
					}
				}
			}
			set_location = {
				target = event_target:jupitwo
				distance = 20
				angle = random
			}
			set_fleet_flag = katzen_planet_platform
		}
	}
}

count_katzen_planets_and_systems = {
	event_target:flusion_primitives_country = {
		set_variable = { #count katzen systems, used to determine how the empire will collapse
			which = "katzen_total_system_count"
			value = 0
		}
		set_variable = {
			which = "katzen_total_system_count"
			value = trigger:count_system_within_border
		}
		set_variable = { #count katzen planets, used to determine how the empire will collapse
			which = "katzen_total_planet_count"
			value = 0
		}
		every_owned_planet = { #count katzen planets
			limit = {
				is_colony = yes
				owner = { is_country_type = katzenartig_imperium }
			}			
			event_target:flusion_primitives_country = {
				change_variable = {
					which = "katzen_total_planet_count"
					value = 1
				}
			}
		}
	}
}

create_solakia = {
	create_pop = {
		species = event_target:solakians
		count = 5
	}
	create_country = {
		species = event_target:solakians
		name = "로쿨리안 공화국"
		authority = auth_democratic
		ethos = {
			ethic = ethic_xenophile
			ethic = ethic_materialist
			ethic = ethic_egalitarian
		}
		origin = origin_katzen_splinter
		civics = random
		flag = {
			icon={
				category="flusionian"
				file="solakia_flag.dds"
			}
			background={
				category="backgrounds"
				file="circle.dds"
			}
			colors={
				"dark_purple"
				"purple"
				"null"
				"null"
			}
		}
		type = default
		effect = {
			if = {
				limit = {
					event_target:flusion_primitives_country = {
						NOT = {
							any_owned_leader = {
								has_leader_flag = dofus
							}
						}
					}
				}
				create_leader = {
					class = official
					species = event_target:solakians
					name = "도푸스 테크니크 마키나"
					gender = male
					effect = {
						save_event_target_as = solakia_ruler
						set_dofus_real_portrait = yes
					}
				}
				set_leader = event_target:solakia_ruler
			}
			else = {
				event_target:dofus = {
					exile_leader_as = dofusmoving
				}
				set_leader = dofusmoving
				event_target:dofus = { set_dofus_real_portrait = yes }
			}
			set_country_flag = solakia
			save_global_event_target_as = solakia
			apply_katzen_difficulty = yes
			add_modifier = {
				modifier = katzenartig_major_splinter
				days = -1
			}
			every_country = {
				establish_communications_no_message = event_target:solakia
			}
			copy_techs_from = {
				target = event_target:flusion_primitives_country
			}
		}
	}
	set_owner = event_target:solakia
	set_capital = yes
	set_name = "다운타운 로쿠알"
	every_system = { #transfer claims
		limit = {
			has_star_flag = solakian_system
		}
		starbase = {
			set_owner = event_target:solakia
		}
		solar_system = { #claim all other habitable planets in system
			every_system_colony = {
				limit = {
					is_capital = no
					owner = {
						is_country_type = katzenartig_imperium
					}
				}
				set_owner = event_target:solakia
			}
		}
	}
	event_target:solakia = {
		every_planet_within_border = {
			limit = {
				is_colony = yes
			}
			create_pop = {
				species = event_target:solakians
				count = 2
			}
		}
		add_resource = {
			minerals = 50000
			alloys = 10000
			energy = 50000
			food = 50000
			consumer_goods = 25000
			exotic_gases = 5000
			volatile_motes = 5000
			rare_crystals = 5000
			influence = 250
		}
		every_system_within_border = { #claim all katzen fleets in borders
			every_fleet_in_system = {
				limit = {
					owner = {
						is_country_type = katzenartig_imperium
					}
				}
				set_owner = event_target:solakia
			}
		}
	}
}

create_laurandar = {
    create_species = {
        name = "브리블리시 주스프리"
        plural = "브리블리시 주스프리"
        class = REP
        portrait = rep8
        homeworld = event_target:gigaflusion
        traits = {
            trait = trait_pc_continental_preference
            trait = trait_industrious
            trait = trait_agrarian
            trait = trait_quarrelsome
        }
        effect = {
            save_global_event_target_as = bribblish_ezics
        }
    }
    while = { #here they come
        count = 5
        create_pop = {
            species = event_target:flusionians
        }
    }
    create_country = {
        species = event_target:flusionians
        name = "라우란다르"
        authority = auth_dictatorial
        origin = origin_katzen_splinter
        ethos = {
            ethic = ethic_militarist
            ethic = ethic_materialist
            ethic = ethic_xenophile
        }
        civics = {
            civic = civic_warrior_culture
            civic = civic_cutthroat_politics
        }
        flag = {
            icon={
                category="flusionian"
                file="laurn_flag.dds"
            }
            background={
                category="backgrounds"
                file="triangle_split.dds"
            }
            colors={
                "yellow"
                "pink"
                "null"
                "null"
            }
        }
        type = default
        effect = {
            create_leader = {
                class = official
                species = event_target:bribblish_ezics
                name = "아론 N. 블루"
                gender = male
                effect = {
                    save_event_target_as = laurandar_ruler
                    set_aaron_real_portrait = yes
                }
            }
            set_leader = event_target:laurandar_ruler
            set_country_flag = laurandar
            save_global_event_target_as = laurandar
            apply_katzen_difficulty = yes
            add_modifier = {
                modifier = katzenartig_major_splinter
                days = -1
            }
            every_country = {
                establish_communications_no_message = event_target:laurandar
            }
            copy_techs_from = {
                target = event_target:flusion_primitives_country
            }
        }
    }
    set_owner = event_target:laurandar
    set_capital = yes
    set_name = "말리버로"
    every_system = { #transfer claims
        limit = {
            has_star_flag = laurandar_system
        }
        starbase = {
            set_owner = event_target:laurandar
        }
        solar_system = { #claim all other habitable planets in system
            every_system_colony = {
                limit = {
                    is_capital = no
                    owner = {
                        is_country_type = katzenartig_imperium
                    }
                }
                set_owner = event_target:laurandar
            }
        }
    }
    event_target:laurandar = {
        every_planet_within_border = {
            limit = {
                is_colony = yes
            }
            create_pop = {
                species = event_target:flusionians
            }
        }
        add_resource = {
            minerals = 50000
            alloys = 10000
            energy = 50000
            food = 50000
            consumer_goods = 25000
            exotic_gases = 5000
            volatile_motes = 5000
            rare_crystals = 5000
            influence = 250
        }
        every_system_within_border = { #claim all katzen fleets in borders
            every_fleet_in_system = {
                limit = {
                    owner = {
                        is_country_type = katzenartig_imperium
                    }
                }
                set_owner = event_target:laurandar
            }
        }
    }
}

create_kronk = {
    create_species = {
        name = "크로커딜리언 크롱크"
        plural = "크로커딜리언 크롱크스"
        class = REP
        portrait = rep14
        homeworld = event_target:gigaflusion
        traits = {
            trait = trait_pc_continental_preference
            trait = trait_rapid_breeders
            trait = trait_resilient
            trait = trait_quarrelsome
        }
        effect = {
            save_global_event_target_as = crockronks
        }
    }
    create_pop = {
        species = event_target:crockronks
        count = 5
    }
    create_country = {
        species = event_target:kronks
        name = "크롱크 왕국"
        authority = auth_oligarchic
        ethos = {
            ethic = ethic_authoritarian
            ethic = ethic_militarist
            ethic = ethic_xenophile
        }
        civics = random
        origin = origin_katzen_splinter
        flag = {
            icon={
                category="domination"
                file="domination_6.dds"
            }
            background={
                category="backgrounds"
                file="stripe.dds"
            }
            colors={
                "dark_blue"
                "red_orange"
                "null"
                "null"
            }
        }
        type = default
        effect = {
            create_leader = {
                class = official
                species = event_target:crockronks
                gender = male
                name = "볼프강"
                effect = {
                    save_event_target_as = kronk_ruler
                }
            }
            set_leader = event_target:kronk_ruler
            set_country_flag = kronkcountry
            save_global_event_target_as = kronkcountry
            apply_katzen_difficulty = yes
            add_modifier = {
                modifier = katzenartig_major_splinter
                days = -1
            }
            every_country = {
                establish_communications_no_message = event_target:kronkcountry
            }
            copy_techs_from = {
                target = event_target:flusion_primitives_country
            }
        }
    }
    set_owner = event_target:kronkcountry
    set_capital = yes
    set_name = "크롱켄"
    every_system = { #transfer claims
        limit = {
            has_star_flag = kronk_system
        }
        starbase = {
            set_owner = event_target:kronkcountry
        }
        solar_system = { #claim all other habitable planets in system
            every_system_colony = {
                limit = {
                    is_capital = no
                    owner = {
                        is_country_type = katzenartig_imperium
                    }
                }
                set_owner = event_target:kronkcountry
            }
        }
    }
    event_target:kronkcountry = {
        every_planet_within_border = {
            limit = {
                is_colony = yes
            }
            create_pop = {
                species = event_target:crockronks
            }
        }
        add_resource = {
            minerals = 50000
            alloys = 10000
            energy = 50000
            food = 50000
            consumer_goods = 25000
            exotic_gases = 5000
            volatile_motes = 5000
            rare_crystals = 5000
            influence = 250
        }
        every_system_within_border = { #claim all katzen fleets in borders
            every_fleet_in_system = {
                limit = {
                    owner = {
                        is_country_type = katzenartig_imperium
                    }
                }
                set_owner = event_target:kronkcountry
            }
        }
    }
}

create_katzen_splinter_state = {
	random_owned_pop = {
		species = {
			save_event_target_as = splinter_species
		}
	}
	solar_system = { #claim nearby systems
		every_neighbor_system = {
			limit = {
				exists = owner
				owner = {
					is_country_type = katzenartig_imperium
				}
				NOT = {
					has_star_flag = flusion_system
				}
			}
			set_star_flag = splinter_state_claim
		}
	}
	every_system = { #claim further systems
		limit = {
			has_star_flag = splinter_state_claim
		}
		every_neighbor_system = {
			limit = {
				exists = owner
				owner = {
					is_country_type = katzenartig_imperium
				}
				NOR = {
					has_star_flag = flusion_system
				}
			}
			random = {
				chance = 60
				set_star_flag = splinter_state_claim
			}
		}
	}
	if = {
		limit = {
			event_target:splinter_species = {
				is_hive_species = yes
			}
		}
		create_country = {
			species = event_target:splinter_species
			name = random
			authority = auth_hive_mind
			civics = random
			ethos = { ethic = ethic_gestalt_consciousness }
			flag = random
			origin = origin_katzen_splinter
			type = default
			effect = {
				set_country_flag = katzen_splinter_state
				save_global_event_target_as = katzen_splinter_country
				add_modifier = {
					modifier = katzenartig_splinter
					days = -1
				}
				apply_katzen_difficulty = yes
				every_country = {
					establish_communications_no_message = event_target:katzen_splinter_country
				}
				copy_techs_from = {
					target = event_target:flusion_primitives_country
				}
			}
		}
	}
	else_if = { 
		limit = {
			event_target:splinter_species = {
				giga_is_machine_species = yes
			}
		}
		create_country = {
			species = event_target:splinter_species
			name = random
			authority = auth_machine_intelligence
			civics = random
			ethos = { ethic = ethic_gestalt_consciousness }
			flag = random
			origin = origin_katzen_splinter
			type = default
			effect = {
				set_country_flag = katzen_splinter_state
				save_global_event_target_as = katzen_splinter_country
				add_modifier = {
					modifier = katzenartig_splinter
					days = -1
				}
				apply_katzen_difficulty = yes
				every_country = {
					establish_communications_no_message = event_target:katzen_splinter_country
				}
				copy_techs_from = {
					target = event_target:flusion_primitives_country
				}
			}
		}
	}
	else_if = {
		limit = {
			event_target:splinter_species = {
				giga_is_robot_species = yes
			}
		}
		create_country = {
			species = event_target:splinter_species
			name = random
			authority = random
			civics = random
			ethos = random
			flag = random
			origin = origin_katzen_splinter
			type = default
			effect = {
				set_country_flag = katzen_splinter_state
				save_global_event_target_as = katzen_splinter_country
				add_modifier = {
					modifier = katzenartig_splinter
					days = -1
				}
				apply_katzen_difficulty = yes
				every_country = {
					establish_communications_no_message = event_target:katzen_splinter_country
				}
				copy_techs_from = {
					target = event_target:flusion_primitives_country
				}
				# Check synthetic pieces
				set_country_flag = synthetic_empire
				set_policy = { 
					policy = artificial_intelligence_policy
					option = ai_full_rights
					cooldown = no
				}
				give_engineering_tech_tier_1_effect = yes
				give_engineering_tech_tier_2_effect = yes
				give_physics_tech_tier_1_effect = yes
				give_physics_tech_tier_2_effect = yes
				give_society_tech_tier_1_effect = yes
				give_society_tech_tier_2_effect = yes
				# Make sure they have the right tech
				give_technology = {
					tech = tech_robotic_workers
					message = no
				}
				give_technology = {
					tech = tech_droid_workers
					message = no
				}
				give_technology = {
					tech = tech_synthetic_workers
					message = no
				}
				give_technology = {
					tech = tech_synthetic_leaders
					message = no
				}
			}
		}
	}
	else = {
		create_country = {
			species = event_target:splinter_species
			name = random
			authority = random
			civics = random
			ethos = random
			flag = random
			origin = origin_katzen_splinter
			type = default
			effect = {
				set_country_flag = katzen_splinter_state
				save_global_event_target_as = katzen_splinter_country
				add_modifier = {
					modifier = katzenartig_splinter
					days = -1
				}
				apply_katzen_difficulty = yes
				every_country = {
					establish_communications_no_message = event_target:katzen_splinter_country
				}
				copy_techs_from = {
					target = event_target:flusion_primitives_country
				}
			}
		}
	}
	set_owner = event_target:katzen_splinter_country
	set_capital = yes
	check_planet_employment = yes
	every_system = { #transfer claims
		limit = {
			has_star_flag = splinter_state_claim
		}
		starbase = {
			set_owner = event_target:katzen_splinter_country
		}
		remove_star_flag = splinter_state_claim
	}
	solar_system = { #claim all other habitable planets in system
		every_system_colony = {
			limit = {
				is_capital = no
				owner = {
					is_country_type = katzenartig_imperium
				}
			}
			set_owner = event_target:katzen_splinter_country
		}
	}
	event_target:katzen_splinter_country = {
		every_planet_within_border = {
			limit = {
				is_colony = yes
				owner = { is_country_type = katzenartig_imperium }
			}
			set_owner = event_target:katzen_splinter_country
		}
		add_resource = {
			minerals = 50000
			alloys = 10000
			energy = 50000
			food = 50000
			consumer_goods = 25000
			exotic_gases = 5000
			volatile_motes = 5000
			rare_crystals = 5000
			influence = 250
		}
		every_system_within_border = { #claim all katzen fleets in borders
			every_fleet_in_system = {
				limit = {
					owner = { is_country_type = katzenartig_imperium }
					NOT = { 
						any_owned_ship = {
							OR = {
								is_ship_size = giga_massive_planet
								is_ship_size = giga_kaiser_moon_flusion
							}
							has_ship_flag = kaiser_moon_ship
						} 
					}
					NOT = { has_fleet_flag = katzen_submarine_fleet }
				}
				set_owner = event_target:katzen_splinter_country
			}
		}
	}
}

clear_flusion_texture_flags = {
	if = { limit = { has_planet_flag = flusion_tomb_texture_applied } remove_planet_flag = flusion_tomb_texture_applied }
	if = { limit = { has_planet_flag = flusion_katzenland_texture_applied } remove_planet_flag = flusion_katzenland_texture_applied }
	if = { limit = { has_planet_flag = flusion_gaia_texture_applied } remove_planet_flag = flusion_gaia_texture_applied }
	if = { limit = { has_planet_flag = flusion_machine_texture_applied } remove_planet_flag = flusion_machine_texture_applied }
	if = { limit = { has_planet_flag = flusion_hive_texture_applied } remove_planet_flag = flusion_hive_texture_applied }
	if = { limit = { has_planet_flag = flusion_desert_texture_applied } remove_planet_flag = flusion_desert_texture_applied }
	if = { limit = { has_planet_flag = flusion_arctic_texture_applied } remove_planet_flag = flusion_arctic_texture_applied }
	if = { limit = { has_planet_flag = flusion_ocean_texture_applied } remove_planet_flag = flusion_ocean_texture_applied }
	if = { limit = { has_planet_flag = flusion_shattered_texture_applied } remove_planet_flag = flusion_shattered_texture_applied }
	if = { limit = { has_planet_flag = flusion_torrid_texture_applied } remove_planet_flag = flusion_torrid_texture_applied }
	if = { limit = { has_planet_flag = flusion_lifeless_texture_applied } remove_planet_flag = flusion_lifeless_texture_applied }
	if = { limit = { has_planet_flag = flusion_foggy_texture_applied } remove_planet_flag = flusion_foggy_texture_applied }
	if = { limit = { has_planet_flag = flusion_molten_texture_applied } remove_planet_flag = flusion_molten_texture_applied }
	if = { limit = { has_planet_flag = flusion_city_texture_applied } remove_planet_flag = flusion_city_texture_applied }
	if = { limit = { has_planet_flag = flusion_voidsphere_texture_applied } remove_planet_flag = flusion_voidsphere_texture_applied }
	if = { limit = { has_planet_flag = flusion_shrouded_texture_applied } remove_planet_flag = flusion_shrouded_texture_applied }
	if = { limit = { has_planet_flag = flusion_fluffy_texture_applied } remove_planet_flag = flusion_fluffy_texture_applied }
	if = { limit = { has_planet_flag = flusion_computer_texture_applied } remove_planet_flag = flusion_computer_texture_applied }
}

katzen_submarine_submerge = {
	set_variable = {
		which = giga_submarine_fleet_ship_count
		value = 0
	}
	ROOT = { #Count submarines
		every_owned_ship = {
			ROOT = {
				change_variable = {
					which = giga_submarine_fleet_ship_count
					value = 1
				}
			}
		}
	}
	create_fleet = {
		name = "Subspace Disruption"
		settings = {
			spawn_debris = no
			can_upgrade = no
			uses_naval_capacity = no
			can_change_composition = no
			is_boss = yes
		}
		effect = {
			set_owner = event_target:katzen_submarine_country
			while = {
				count = 1 #test
				create_ship = {
					name = random
					design = "Anomalous Subspace"
					prefix = no
				}
			}
			set_fleet_flag = submerged_katzen_submarines_fleet
			set_location = {
				target = ROOT
				distance = 1
				angle = random
			}
			set_fleet_stance = passive
			set_variable = {
				which = giga_submarine_fleet_ship_count
				value = ROOT.giga_submarine_fleet_ship_count
			}
			fleet_event = { id = giga_katzen.8508 days = 360 }
			every_country = {
				set_faction_hostility = {
					target = event_target:katzen_submarine_country
					set_hostile = no
					set_neutral = yes
					set_friendly = no
				}
			}
		}
	}
	delete_fleet = ROOT
}

katzen_submarine_unsubmerge = {
	create_fleet = {
		name = "Unterraumboot Flotte"
		settings = {
			spawn_debris = no
			can_upgrade = no
			uses_naval_capacity = no
			can_change_composition = no
		}
		effect = {
			set_owner = event_target:flusion_primitives_country
			while = {
				count = ROOT.giga_submarine_fleet_ship_count
				create_ship = {
					name = random
					design = "Kimitz"
					prefix = no
					effect = { set_disable_at_health = 0.05 }
				}
			}
			set_location = {
				target = ROOT
				distance = 1
				angle = random
			}
			set_formation_scale = 2
			set_fleet_flag = katzen_submarine_fleet
		}
	}
	delete_fleet = ROOT
}

#NEW SPAWN SCRIPT
spawn_katzen_warforge_fleet = {
	# leader for 1/3rd of the fleets like the old effect
	event_target:flusion_primitives_country = {
		random = {
			chance = 33
			create_katzen_admiral = yes
		}
	}
	create_fleet = {
		settings = {
			spawn_debris = no
			can_upgrade = no
			uses_naval_capacity = yes
		}
		effect = {
			set_owner = event_target:flusion_primitives_country
			while = {
				count = @kaiser_warforge_build_capacity
				limit = {
					event_target:flusion_primitives_country = { #Can't even afford 1 Panzer in upkeep or cost
						check_variable = {
							which = kaiser_resource_stockpile
							value > value:katzen_cost|COST|@min_kaiser_ship_cost|
						}
						check_variable = {
							which = kaiser_resource_balance
							value > value:katzen_upkeep|UPKEEP|@min_kaiser_ship_upkeep|
						}
					}
				}
				random_list = {
					4 = {
						create_ship = {
							name = random
							design = "Katzchen"
							prefix = no
						}
						event_target:flusion_primitives_country = {
							subtract_variable = {
								which = kaiser_resource_stockpile
								value = value:katzen_cost|COST|@kaiser_panzer_cost|
							}
						}
					}
					2 = {
						create_ship = {
							name = random
							design = "Douclaw"
							prefix = no
						}
						event_target:flusion_primitives_country = {
							subtract_variable = {
								which = kaiser_resource_stockpile
								value = value:katzen_cost|COST|@kaiser_bomber_cost|
							}
						}
						modifier = {
							factor = 0
							event_target:flusion_primitives_country = {
								OR = {
									check_variable = {
										which = kaiser_resource_stockpile
										value < value:katzen_cost|COST|@kaiser_bomber_cost|
									}
									check_variable = {
										which = kaiser_resource_balance
										value < value:katzen_upkeep|UPKEEP|@kaiser_bomber_upkeep|
									}
								}
							}
						}
					}
					1 = {
						create_ship = {
							name = random
							design = "Neu-Clermeowth"
							prefix = no
						}
						event_target:flusion_primitives_country = {
							subtract_variable = {
								which = kaiser_resource_stockpile
								value = value:katzen_cost|COST|@kaiser_cruiser_cost|
							}
						}
						modifier = {
							factor = 0
							event_target:flusion_primitives_country = {
								OR = {
									check_variable = {
										which = kaiser_resource_stockpile
										value < value:katzen_cost|COST|@kaiser_cruiser_cost|
									}
									check_variable = {
										which = kaiser_resource_balance
										value < value:katzen_upkeep|UPKEEP|@kaiser_cruiser_upkeep|
									}
								}
							}
						}
					}
				}
			}
			giga_assign_admiral = yes
			assign_leader = event_target:admiral_assignee
			set_location = {
				target = ROOT
				distance = 10
				angle = random
			}
		}
	}
}

giga_create_kaiser_kattail_portrait = {
	if = {
		limit = { NOT = { has_global_flag = kaiser_portrait_defined } }
		if = {
			limit = { has_global_flag = silly_flusionian_portraits_enabled_cattail }
			create_species = {
				name = "임페리얼 캇젠"
				plural = "임페리얼 캇젠"
				class = Flusionian
				portrait = kaiser
				homeworld = event_target:gigaflusion
				traits = {
					trait = trait_pc_continental_preference
					trait = trait_quick_learners
					trait = trait_talented
					trait = trait_venerable
				}
				effect = {
					set_global_flag = kaiser_portrait_defined
					save_global_event_target_as = gigakaiserportrait
				}
			}
		}
		else = {
			create_species = {
				name = "임페리얼 캇젠"
				plural = "임페리얼 캇젠"
				class = POUCHKINN
				portrait = Kattail_1
				homeworld = event_target:gigaflusion
				traits = {
					trait = trait_pc_continental_preference
					trait = trait_quick_learners
					trait = trait_talented
					trait = trait_venerable
				}
				effect = {
					set_global_flag = kaiser_portrait_defined
					save_global_event_target_as = gigakaiserportrait
				}
			}
		}
	}
	event_target:global_event_country = {
		if = {
			limit = { NOT = { any_owned_leader = { has_leader_flag = kaiser_kattail_leader } } }
			create_leader = {
				class = commander
				species = event_target:gigakaiserportrait
				gender = male
				set_age = 150
				name = "카이저 캇테일"
				immortal = yes
				effect = {
					save_global_event_target_as = globalevent_kaiser_portrait
				}
			}
		}
	}
}
# Should be used in a setup like this, gets the highest level non douclaw idle admiral to lead the fleet
# giga_assign_admiral = yes
# assign_leader = event_target:admiral_assignee
giga_assign_admiral = {
	owner = {
		ordered_owned_leader = {
			limit = { 
				is_idle = yes 
				leader_class = commander
				NOT = { has_leader_flag = flusiondouclaw }
			}
			position = 0
			order_by = trigger:has_skill
			save_event_target_as = admiral_assignee
		}
	}
}

giga_apply_difficulty_setting = {
	switch = {
		trigger = is_difficulty
		3 = {
			add_modifier = {
				modifier = difficulty_captain
				multiplier = 0.5
			}
			add_modifier = {
				modifier = difficulty_grand_admiral_npc
				multiplier = 0.2
			}
		}
		4 = {
			add_modifier = {
				modifier = difficulty_commodore
				multiplier = 0.5
			}
			add_modifier = {
				modifier = difficulty_grand_admiral_npc
				multiplier = 0.3
			}
		}
		5 = {
			add_modifier = {
				modifier = difficulty_admiral
				multiplier = 0.5
			}
			add_modifier = {
				modifier = difficulty_grand_admiral_npc
				multiplier = 0.4
			}
		}
		6 = {
			add_modifier = {
				modifier = difficulty_grand_admiral
				multiplier = 0.5
			}
			add_modifier = {
				modifier = difficulty_grand_admiral_npc
				multiplier = 0.5
			}
		}
	}
}